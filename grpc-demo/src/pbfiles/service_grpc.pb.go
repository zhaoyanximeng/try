// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pbfiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProdServiceClient is the client API for ProdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProdServiceClient interface {
	GetProd(ctx context.Context, in *ProdRequest, opts ...grpc.CallOption) (*ProdResponse, error)
	UpdateProd(ctx context.Context, in *ProdRequest, opts ...grpc.CallOption) (*ProdResponse, error)
	GetProdStream(ctx context.Context, in *ProdRequest, opts ...grpc.CallOption) (ProdService_GetProdStreamClient, error)
}

type prodServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProdServiceClient(cc grpc.ClientConnInterface) ProdServiceClient {
	return &prodServiceClient{cc}
}

func (c *prodServiceClient) GetProd(ctx context.Context, in *ProdRequest, opts ...grpc.CallOption) (*ProdResponse, error) {
	out := new(ProdResponse)
	err := c.cc.Invoke(ctx, "/ProdService/GetProd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodServiceClient) UpdateProd(ctx context.Context, in *ProdRequest, opts ...grpc.CallOption) (*ProdResponse, error) {
	out := new(ProdResponse)
	err := c.cc.Invoke(ctx, "/ProdService/UpdateProd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodServiceClient) GetProdStream(ctx context.Context, in *ProdRequest, opts ...grpc.CallOption) (ProdService_GetProdStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProdService_ServiceDesc.Streams[0], "/ProdService/GetProdStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &prodServiceGetProdStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProdService_GetProdStreamClient interface {
	Recv() (*ProdResponse, error)
	grpc.ClientStream
}

type prodServiceGetProdStreamClient struct {
	grpc.ClientStream
}

func (x *prodServiceGetProdStreamClient) Recv() (*ProdResponse, error) {
	m := new(ProdResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProdServiceServer is the server API for ProdService service.
// All implementations must embed UnimplementedProdServiceServer
// for forward compatibility
type ProdServiceServer interface {
	GetProd(context.Context, *ProdRequest) (*ProdResponse, error)
	UpdateProd(context.Context, *ProdRequest) (*ProdResponse, error)
	GetProdStream(*ProdRequest, ProdService_GetProdStreamServer) error
	mustEmbedUnimplementedProdServiceServer()
}

// UnimplementedProdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProdServiceServer struct {
}

func (UnimplementedProdServiceServer) GetProd(context.Context, *ProdRequest) (*ProdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProd not implemented")
}
func (UnimplementedProdServiceServer) UpdateProd(context.Context, *ProdRequest) (*ProdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProd not implemented")
}
func (UnimplementedProdServiceServer) GetProdStream(*ProdRequest, ProdService_GetProdStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProdStream not implemented")
}
func (UnimplementedProdServiceServer) mustEmbedUnimplementedProdServiceServer() {}

// UnsafeProdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProdServiceServer will
// result in compilation errors.
type UnsafeProdServiceServer interface {
	mustEmbedUnimplementedProdServiceServer()
}

func RegisterProdServiceServer(s grpc.ServiceRegistrar, srv ProdServiceServer) {
	s.RegisterService(&ProdService_ServiceDesc, srv)
}

func _ProdService_GetProd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdServiceServer).GetProd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProdService/GetProd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdServiceServer).GetProd(ctx, req.(*ProdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdService_UpdateProd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdServiceServer).UpdateProd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProdService/UpdateProd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdServiceServer).UpdateProd(ctx, req.(*ProdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdService_GetProdStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProdServiceServer).GetProdStream(m, &prodServiceGetProdStreamServer{stream})
}

type ProdService_GetProdStreamServer interface {
	Send(*ProdResponse) error
	grpc.ServerStream
}

type prodServiceGetProdStreamServer struct {
	grpc.ServerStream
}

func (x *prodServiceGetProdStreamServer) Send(m *ProdResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ProdService_ServiceDesc is the grpc.ServiceDesc for ProdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProdService",
	HandlerType: (*ProdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProd",
			Handler:    _ProdService_GetProd_Handler,
		},
		{
			MethodName: "UpdateProd",
			Handler:    _ProdService_UpdateProd_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetProdStream",
			Handler:       _ProdService_GetProdStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUserScoreByStream(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserScoreByStreamClient, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUserScoreByStream(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserScoreByStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], "/UserService/GetUserScoreByStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetUserScoreByStreamClient{stream}
	return x, nil
}

type UserService_GetUserScoreByStreamClient interface {
	Send(*UserScoreRequest) error
	Recv() (*UserScoreResponse, error)
	grpc.ClientStream
}

type userServiceGetUserScoreByStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceGetUserScoreByStreamClient) Send(m *UserScoreRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceGetUserScoreByStreamClient) Recv() (*UserScoreResponse, error) {
	m := new(UserScoreResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetUserScoreByStream(UserService_GetUserScoreByStreamServer) error
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetUserScoreByStream(UserService_GetUserScoreByStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserScoreByStream not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUserScoreByStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).GetUserScoreByStream(&userServiceGetUserScoreByStreamServer{stream})
}

type UserService_GetUserScoreByStreamServer interface {
	Send(*UserScoreResponse) error
	Recv() (*UserScoreRequest, error)
	grpc.ServerStream
}

type userServiceGetUserScoreByStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceGetUserScoreByStreamServer) Send(m *UserScoreResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceGetUserScoreByStreamServer) Recv() (*UserScoreRequest, error) {
	m := new(UserScoreRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserScoreByStream",
			Handler:       _UserService_GetUserScoreByStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
